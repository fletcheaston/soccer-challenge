[tool.setuptools]
py-modules = []

[project]
name = "soccer-challenge"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "typer==0.9.0",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "black==23.7.0",
    "mypy==1.5.1",
    "ruff==0.0.286",
]
test = [
    "pytest==7.4.0",
    "pytest-cov==4.1.0",
    "pytest-lazy-fixture==0.6.3",
]

[tool.mypy]
strict = true
allow_untyped_decorators = true
allow_subclassing_any = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
]
ignore_errors = true
allow_untyped_decorators = true

[tool.ruff]
select = [
    "F",  # pyflakes
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "C90",  # mccabe complexity
    "N",  # pep8-naming
    "B",  # flake8-bugbear
    "COM",  # flake8-commas
    "C4",  # flake8-comprehensions
    "PYI",  # flake8-pyi
    "Q",  # flake8-quotes
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "C901",  # function is too complex
    "E402",  # Module level import not at top of file
]

[tool.ruff.per-file-ignores]
"__init__.py" = [
    "F401",  # Unused imports
]

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
]

[tool.ruff.flake8-quotes]
inline-quotes = "double"

[tool.black]
line-length = 88

[tool.pytest.ini_options]
python_functions = [
    "test_",
]
markers = [
    "unit",
    "integration",
    "e2e",
]
